"""Update DB

Revision ID: b77d463ea664
Revises: d24d337f7bfa
Create Date: 2025-07-16 11:43:59.316332

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b77d463ea664'
down_revision: Union[str, Sequence[str], None] = 'd24d337f7bfa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('day_timekeeping_black_tag')
    op.drop_table('black_tag')
    op.drop_table('employee_information')
    op.add_column('day_timekeeping', sa.Column('shift_start', sa.DateTime(), nullable=False))
    op.add_column('day_timekeeping', sa.Column('shift_end', sa.DateTime(), nullable=False))
    op.add_column('day_timekeeping', sa.Column('is_checkin_late', sa.Boolean(), nullable=True))
    op.add_column('day_timekeeping', sa.Column('is_checkout_early', sa.Boolean(), nullable=True))
    op.add_column('day_timekeeping', sa.Column('is_enough_time', sa.Boolean(), nullable=True))
    op.add_column('employee', sa.Column('update_date', sa.DateTime(), nullable=True))
    op.add_column('employee', sa.Column('name', sa.String(length=50), nullable=False))
    op.add_column('employee', sa.Column('email', sa.String(length=50), nullable=False))
    op.add_column('employee', sa.Column('phone_number', sa.String(length=10), nullable=False))
    op.add_column('employee', sa.Column('address', sa.String(length=100), nullable=True))
    op.add_column('employee', sa.Column('dob', sa.Date(), nullable=True))
    op.add_column('employee', sa.Column('position', sa.Enum('IT', 'QA', 'BA', 'TESTER', 'PM', name='employeeposition'), nullable=True))
    op.add_column('employee', sa.Column('team_id', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'employee', ['email'])
    op.create_unique_constraint(None, 'employee', ['phone_number'])
    op.create_foreign_key(None, 'employee', 'team', ['team_id'], ['id'], ondelete='SET NULL')
    op.add_column('month_time_keeping', sa.Column('expected_working_days', sa.Integer(), nullable=False))
    op.alter_column('month_time_keeping', 'working_hours',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('month_time_keeping', 'working_days',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('salary', 'allowance',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('salary', 'reward',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('salary', 'reward',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('salary', 'allowance',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('month_time_keeping', 'working_days',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('month_time_keeping', 'working_hours',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('month_time_keeping', 'expected_working_days')
    op.drop_constraint(None, 'employee', type_='foreignkey')
    op.drop_constraint(None, 'employee', type_='unique')
    op.drop_constraint(None, 'employee', type_='unique')
    op.drop_column('employee', 'team_id')
    op.drop_column('employee', 'position')
    op.drop_column('employee', 'dob')
    op.drop_column('employee', 'address')
    op.drop_column('employee', 'phone_number')
    op.drop_column('employee', 'email')
    op.drop_column('employee', 'name')
    op.drop_column('employee', 'update_date')
    op.drop_column('day_timekeeping', 'is_enough_time')
    op.drop_column('day_timekeeping', 'is_checkout_early')
    op.drop_column('day_timekeeping', 'is_checkin_late')
    op.drop_column('day_timekeeping', 'shift_end')
    op.drop_column('day_timekeeping', 'shift_start')
    op.create_table('employee_information',
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('dob', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('position', postgresql.ENUM('IT', 'QA', 'BA', 'TESTER', 'PM', name='employeeposition'), autoincrement=False, nullable=True),
    sa.Column('team_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], name=op.f('employee_information_employee_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], name=op.f('employee_information_team_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('employee_id', name=op.f('employee_information_pkey')),
    sa.UniqueConstraint('email', name=op.f('employee_information_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('phone_number', name=op.f('employee_information_phone_number_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('black_tag',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('black_tag_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', postgresql.ENUM('LATE_CHECK_IN', 'SOON_CHECK_OUT', 'LACK_WORKING_HOURS', 'INVALID', name='tagname'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='black_tag_pkey'),
    sa.UniqueConstraint('name', name='black_tag_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('day_timekeeping_black_tag',
    sa.Column('day_timekeeping_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('black_tag_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['black_tag_id'], ['black_tag.id'], name=op.f('day_timekeeping_black_tag_black_tag_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['day_timekeeping_id'], ['day_timekeeping.id'], name=op.f('day_timekeeping_black_tag_day_timekeeping_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('day_timekeeping_id', 'black_tag_id', name=op.f('day_timekeeping_black_tag_pkey'))
    )
    # ### end Alembic commands ###
