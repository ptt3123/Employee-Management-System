import { SalaryCreate, SalaryUpdate, SalaryBackendResponse } from '../types/salary';

const BASE_URL = "https://provided-counseling-preferred-replacement.trycloudflare.com/";

// üõ† H√†m x·ª≠ l√Ω l·ªói chung (theo pattern c·ªßa project)
async function handleApiError(res: Response): Promise<never> {
  try {
    const errorData = await res.json();

    if (res.status === 400 && typeof errorData.detail === "object") {
      throw errorData.detail;
    }

    if (typeof errorData.detail === "string") {
      throw new Error(errorData.detail);
    }

    throw new Error("ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server.");
  } catch {
    throw new Error("Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ server.");
  }
}

// üü¢ 1. L·∫•y l∆∞∆°ng theo ID nh√¢n vi√™n (READ API)
export async function getSalaryByEmployeeId(employeeId: number, token: string): Promise<SalaryBackendResponse | null> {
  const res = await fetch(`${BASE_URL}salary/read?employee_id=${employeeId}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    },
  });

  if (res.status === 404) return null;
  if (!res.ok) await handleApiError(res);

  const json = await res.json();

  if (!json.data) {
    return null;
  }

  return json.data;
}

// üü¢ 2. L·∫•y l∆∞∆°ng nh√¢n vi√™n (READ-EMPLOYEE API)
export async function getEmployeeSalary(employeeId: number, token: string): Promise<SalaryBackendResponse | null> {
  const res = await fetch(`${BASE_URL}salary/read-employee?employee_id=${employeeId}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    },
  });

  if (res.status === 404) return null;
  if (!res.ok) await handleApiError(res);

  const json = await res.json();

  if (!json.data) {
    return null;
  }

  return json.data;
}

// üü¢ 3. C·∫≠p nh·∫≠t l∆∞∆°ng (UPDATE API)
export async function updateSalary(employeeId: number, updates: SalaryUpdate, token: string): Promise<SalaryBackendResponse> {
  const res = await fetch(`${BASE_URL}salary/update`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify({
      employee_id: employeeId,
      ...updates
    }),
  });

  if (!res.ok) await handleApiError(res);

  const json = await res.json();

  if (json.message !== "success") {
    throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l∆∞∆°ng.");
  }

  // Fetch updated salary data
  const updatedSalary = await getSalaryByEmployeeId(employeeId, token);
  if (!updatedSalary) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu l∆∞∆°ng sau khi c·∫≠p nh·∫≠t.");
  }

  return updatedSalary;
}

// üü¢ 4. T·∫°o l∆∞∆°ng m·ªõi (CREATE API - ch∆∞a c√≥ trong backend, d√πng update thay th·∫ø)
export async function createSalary(salaryData: SalaryCreate, token: string): Promise<SalaryBackendResponse> {
  // S·ª≠ d·ª•ng API update ƒë·ªÉ t·∫°o m·ªõi (v√¨ backend ch∆∞a c√≥ create API ri√™ng)
  const res = await fetch(`${BASE_URL}salary/update`, {
    method: "POST",
    headers: { 
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,
    },
    body: JSON.stringify(salaryData),
  });

  if (!res.ok) await handleApiError(res);

  const json = await res.json();

  if (json.message !== "success") {
    throw new Error("Kh√¥ng th·ªÉ t·∫°o l∆∞∆°ng m·ªõi.");
  }

  // Fetch created salary data
  const newSalary = await getSalaryByEmployeeId(salaryData.employee_id, token);
  if (!newSalary) {
    throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu l∆∞∆°ng sau khi t·∫°o.");
  }

  return newSalary;
}
